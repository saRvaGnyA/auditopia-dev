// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EtherTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EtherTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EtherTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EtherTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EtherTransferred | null {
    return changetype<EtherTransferred | null>(
      store.get_in_block("EtherTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): EtherTransferred | null {
    return changetype<EtherTransferred | null>(
      store.get("EtherTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auditId(): BigInt {
    let value = this.get("auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditId(value: BigInt) {
    this.set("auditId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class betNoBugsPoolEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save betNoBugsPoolEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type betNoBugsPoolEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("betNoBugsPoolEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): betNoBugsPoolEvent | null {
    return changetype<betNoBugsPoolEvent | null>(
      store.get_in_block("betNoBugsPoolEvent", id.toHexString())
    );
  }

  static load(id: Bytes): betNoBugsPoolEvent | null {
    return changetype<betNoBugsPoolEvent | null>(
      store.get("betNoBugsPoolEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auditId(): BigInt {
    let value = this.get("auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditId(value: BigInt) {
    this.set("auditId", Value.fromBigInt(value));
  }

  get contributor(): Bytes {
    let value = this.get("contributor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contributor(value: Bytes) {
    this.set("contributor", Value.fromBytes(value));
  }

  get contribution(): BigInt {
    let value = this.get("contribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contribution(value: BigInt) {
    this.set("contribution", Value.fromBigInt(value));
  }

  get auditState_auditId(): BigInt {
    let value = this.get("auditState_auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_auditId(value: BigInt) {
    this.set("auditState_auditId", Value.fromBigInt(value));
  }

  get auditState_ownerId(): Bytes {
    let value = this.get("auditState_ownerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set auditState_ownerId(value: Bytes) {
    this.set("auditState_ownerId", Value.fromBytes(value));
  }

  get auditState_createdAt(): BigInt {
    let value = this.get("auditState_createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_createdAt(value: BigInt) {
    this.set("auditState_createdAt", Value.fromBigInt(value));
  }

  get auditState_contractCid(): string {
    let value = this.get("auditState_contractCid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auditState_contractCid(value: string) {
    this.set("auditState_contractCid", Value.fromString(value));
  }

  get auditState_description(): string {
    let value = this.get("auditState_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auditState_description(value: string) {
    this.set("auditState_description", Value.fromString(value));
  }

  get auditState_isComplete(): boolean {
    let value = this.get("auditState_isComplete");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_isComplete(value: boolean) {
    this.set("auditState_isComplete", Value.fromBoolean(value));
  }

  get auditState_isDistributed(): boolean {
    let value = this.get("auditState_isDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_isDistributed(value: boolean) {
    this.set("auditState_isDistributed", Value.fromBoolean(value));
  }

  get auditState_yesBugs(): BigInt {
    let value = this.get("auditState_yesBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_yesBugs(value: BigInt) {
    this.set("auditState_yesBugs", Value.fromBigInt(value));
  }

  get auditState_noBugs(): BigInt {
    let value = this.get("auditState_noBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_noBugs(value: BigInt) {
    this.set("auditState_noBugs", Value.fromBigInt(value));
  }

  get auditState_yesBugsPoolEth(): BigInt {
    let value = this.get("auditState_yesBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_yesBugsPoolEth(value: BigInt) {
    this.set("auditState_yesBugsPoolEth", Value.fromBigInt(value));
  }

  get auditState_noBugsPoolEth(): BigInt {
    let value = this.get("auditState_noBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_noBugsPoolEth(value: BigInt) {
    this.set("auditState_noBugsPoolEth", Value.fromBigInt(value));
  }

  get auditState_bugExistsDecision(): boolean {
    let value = this.get("auditState_bugExistsDecision");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_bugExistsDecision(value: boolean) {
    this.set("auditState_bugExistsDecision", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class betYesBugsPoolEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save betYesBugsPoolEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type betYesBugsPoolEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("betYesBugsPoolEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): betYesBugsPoolEvent | null {
    return changetype<betYesBugsPoolEvent | null>(
      store.get_in_block("betYesBugsPoolEvent", id.toHexString())
    );
  }

  static load(id: Bytes): betYesBugsPoolEvent | null {
    return changetype<betYesBugsPoolEvent | null>(
      store.get("betYesBugsPoolEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auditId(): BigInt {
    let value = this.get("auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditId(value: BigInt) {
    this.set("auditId", Value.fromBigInt(value));
  }

  get contributor(): Bytes {
    let value = this.get("contributor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contributor(value: Bytes) {
    this.set("contributor", Value.fromBytes(value));
  }

  get contribution(): BigInt {
    let value = this.get("contribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contribution(value: BigInt) {
    this.set("contribution", Value.fromBigInt(value));
  }

  get auditState_auditId(): BigInt {
    let value = this.get("auditState_auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_auditId(value: BigInt) {
    this.set("auditState_auditId", Value.fromBigInt(value));
  }

  get auditState_ownerId(): Bytes {
    let value = this.get("auditState_ownerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set auditState_ownerId(value: Bytes) {
    this.set("auditState_ownerId", Value.fromBytes(value));
  }

  get auditState_createdAt(): BigInt {
    let value = this.get("auditState_createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_createdAt(value: BigInt) {
    this.set("auditState_createdAt", Value.fromBigInt(value));
  }

  get auditState_contractCid(): string {
    let value = this.get("auditState_contractCid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auditState_contractCid(value: string) {
    this.set("auditState_contractCid", Value.fromString(value));
  }

  get auditState_description(): string {
    let value = this.get("auditState_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auditState_description(value: string) {
    this.set("auditState_description", Value.fromString(value));
  }

  get auditState_isComplete(): boolean {
    let value = this.get("auditState_isComplete");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_isComplete(value: boolean) {
    this.set("auditState_isComplete", Value.fromBoolean(value));
  }

  get auditState_isDistributed(): boolean {
    let value = this.get("auditState_isDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_isDistributed(value: boolean) {
    this.set("auditState_isDistributed", Value.fromBoolean(value));
  }

  get auditState_yesBugs(): BigInt {
    let value = this.get("auditState_yesBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_yesBugs(value: BigInt) {
    this.set("auditState_yesBugs", Value.fromBigInt(value));
  }

  get auditState_noBugs(): BigInt {
    let value = this.get("auditState_noBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_noBugs(value: BigInt) {
    this.set("auditState_noBugs", Value.fromBigInt(value));
  }

  get auditState_yesBugsPoolEth(): BigInt {
    let value = this.get("auditState_yesBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_yesBugsPoolEth(value: BigInt) {
    this.set("auditState_yesBugsPoolEth", Value.fromBigInt(value));
  }

  get auditState_noBugsPoolEth(): BigInt {
    let value = this.get("auditState_noBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_noBugsPoolEth(value: BigInt) {
    this.set("auditState_noBugsPoolEth", Value.fromBigInt(value));
  }

  get auditState_bugExistsDecision(): boolean {
    let value = this.get("auditState_bugExistsDecision");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_bugExistsDecision(value: boolean) {
    this.set("auditState_bugExistsDecision", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class insertIntoAuditEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save insertIntoAuditEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type insertIntoAuditEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("insertIntoAuditEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): insertIntoAuditEvent | null {
    return changetype<insertIntoAuditEvent | null>(
      store.get_in_block("insertIntoAuditEvent", id.toHexString())
    );
  }

  static load(id: Bytes): insertIntoAuditEvent | null {
    return changetype<insertIntoAuditEvent | null>(
      store.get("insertIntoAuditEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auditId(): BigInt {
    let value = this.get("auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditId(value: BigInt) {
    this.set("auditId", Value.fromBigInt(value));
  }

  get ownerId(): Bytes {
    let value = this.get("ownerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ownerId(value: Bytes) {
    this.set("ownerId", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get contractCid(): string {
    let value = this.get("contractCid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contractCid(value: string) {
    this.set("contractCid", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get isComplete(): boolean {
    let value = this.get("isComplete");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isComplete(value: boolean) {
    this.set("isComplete", Value.fromBoolean(value));
  }

  get isDistributed(): boolean {
    let value = this.get("isDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDistributed(value: boolean) {
    this.set("isDistributed", Value.fromBoolean(value));
  }

  get yesBugs(): BigInt {
    let value = this.get("yesBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set yesBugs(value: BigInt) {
    this.set("yesBugs", Value.fromBigInt(value));
  }

  get noBugs(): BigInt {
    let value = this.get("noBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set noBugs(value: BigInt) {
    this.set("noBugs", Value.fromBigInt(value));
  }

  get yesBugsPoolEth(): BigInt {
    let value = this.get("yesBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set yesBugsPoolEth(value: BigInt) {
    this.set("yesBugsPoolEth", Value.fromBigInt(value));
  }

  get noBugsPoolEth(): BigInt {
    let value = this.get("noBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set noBugsPoolEth(value: BigInt) {
    this.set("noBugsPoolEth", Value.fromBigInt(value));
  }

  get bugExistsDecision(): boolean {
    let value = this.get("bugExistsDecision");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set bugExistsDecision(value: boolean) {
    this.set("bugExistsDecision", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class insertIntoIssueEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save insertIntoIssueEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type insertIntoIssueEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("insertIntoIssueEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): insertIntoIssueEvent | null {
    return changetype<insertIntoIssueEvent | null>(
      store.get_in_block("insertIntoIssueEvent", id.toHexString())
    );
  }

  static load(id: Bytes): insertIntoIssueEvent | null {
    return changetype<insertIntoIssueEvent | null>(
      store.get("insertIntoIssueEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get issueId(): BigInt {
    let value = this.get("issueId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set issueId(value: BigInt) {
    this.set("issueId", Value.fromBigInt(value));
  }

  get auditId(): BigInt {
    let value = this.get("auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditId(value: BigInt) {
    this.set("auditId", Value.fromBigInt(value));
  }

  get reportedBy(): Bytes {
    let value = this.get("reportedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reportedBy(value: Bytes) {
    this.set("reportedBy", Value.fromBytes(value));
  }

  get isAccepted(): boolean {
    let value = this.get("isAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAccepted(value: boolean) {
    this.set("isAccepted", Value.fromBoolean(value));
  }

  get isPending(): boolean {
    let value = this.get("isPending");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPending(value: boolean) {
    this.set("isPending", Value.fromBoolean(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class setAuditCompletedEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save setAuditCompletedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type setAuditCompletedEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("setAuditCompletedEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): setAuditCompletedEvent | null {
    return changetype<setAuditCompletedEvent | null>(
      store.get_in_block("setAuditCompletedEvent", id.toHexString())
    );
  }

  static load(id: Bytes): setAuditCompletedEvent | null {
    return changetype<setAuditCompletedEvent | null>(
      store.get("setAuditCompletedEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auditId(): BigInt {
    let value = this.get("auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditId(value: BigInt) {
    this.set("auditId", Value.fromBigInt(value));
  }

  get bugExistsDecision(): boolean {
    let value = this.get("bugExistsDecision");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set bugExistsDecision(value: boolean) {
    this.set("bugExistsDecision", Value.fromBoolean(value));
  }

  get auditState_auditId(): BigInt {
    let value = this.get("auditState_auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_auditId(value: BigInt) {
    this.set("auditState_auditId", Value.fromBigInt(value));
  }

  get auditState_ownerId(): Bytes {
    let value = this.get("auditState_ownerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set auditState_ownerId(value: Bytes) {
    this.set("auditState_ownerId", Value.fromBytes(value));
  }

  get auditState_createdAt(): BigInt {
    let value = this.get("auditState_createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_createdAt(value: BigInt) {
    this.set("auditState_createdAt", Value.fromBigInt(value));
  }

  get auditState_contractCid(): string {
    let value = this.get("auditState_contractCid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auditState_contractCid(value: string) {
    this.set("auditState_contractCid", Value.fromString(value));
  }

  get auditState_description(): string {
    let value = this.get("auditState_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auditState_description(value: string) {
    this.set("auditState_description", Value.fromString(value));
  }

  get auditState_isComplete(): boolean {
    let value = this.get("auditState_isComplete");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_isComplete(value: boolean) {
    this.set("auditState_isComplete", Value.fromBoolean(value));
  }

  get auditState_isDistributed(): boolean {
    let value = this.get("auditState_isDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_isDistributed(value: boolean) {
    this.set("auditState_isDistributed", Value.fromBoolean(value));
  }

  get auditState_yesBugs(): BigInt {
    let value = this.get("auditState_yesBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_yesBugs(value: BigInt) {
    this.set("auditState_yesBugs", Value.fromBigInt(value));
  }

  get auditState_noBugs(): BigInt {
    let value = this.get("auditState_noBugs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_noBugs(value: BigInt) {
    this.set("auditState_noBugs", Value.fromBigInt(value));
  }

  get auditState_yesBugsPoolEth(): BigInt {
    let value = this.get("auditState_yesBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_yesBugsPoolEth(value: BigInt) {
    this.set("auditState_yesBugsPoolEth", Value.fromBigInt(value));
  }

  get auditState_noBugsPoolEth(): BigInt {
    let value = this.get("auditState_noBugsPoolEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auditState_noBugsPoolEth(value: BigInt) {
    this.set("auditState_noBugsPoolEth", Value.fromBigInt(value));
  }

  get auditState_bugExistsDecision(): boolean {
    let value = this.get("auditState_bugExistsDecision");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set auditState_bugExistsDecision(value: boolean) {
    this.set("auditState_bugExistsDecision", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class setIsIssueAcceptedEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save setIsIssueAcceptedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type setIsIssueAcceptedEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("setIsIssueAcceptedEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): setIsIssueAcceptedEvent | null {
    return changetype<setIsIssueAcceptedEvent | null>(
      store.get_in_block("setIsIssueAcceptedEvent", id.toHexString())
    );
  }

  static load(id: Bytes): setIsIssueAcceptedEvent | null {
    return changetype<setIsIssueAcceptedEvent | null>(
      store.get("setIsIssueAcceptedEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get issueId(): BigInt {
    let value = this.get("issueId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set issueId(value: BigInt) {
    this.set("issueId", Value.fromBigInt(value));
  }

  get isIssueAccepted(): boolean {
    let value = this.get("isIssueAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isIssueAccepted(value: boolean) {
    this.set("isIssueAccepted", Value.fromBoolean(value));
  }

  get issueState_issueId(): BigInt {
    let value = this.get("issueState_issueId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set issueState_issueId(value: BigInt) {
    this.set("issueState_issueId", Value.fromBigInt(value));
  }

  get issueState_auditId(): BigInt {
    let value = this.get("issueState_auditId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set issueState_auditId(value: BigInt) {
    this.set("issueState_auditId", Value.fromBigInt(value));
  }

  get issueState_reportedBy(): Bytes {
    let value = this.get("issueState_reportedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set issueState_reportedBy(value: Bytes) {
    this.set("issueState_reportedBy", Value.fromBytes(value));
  }

  get issueState_isAccepted(): boolean {
    let value = this.get("issueState_isAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set issueState_isAccepted(value: boolean) {
    this.set("issueState_isAccepted", Value.fromBoolean(value));
  }

  get issueState_isPending(): boolean {
    let value = this.get("issueState_isPending");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set issueState_isPending(value: boolean) {
    this.set("issueState_isPending", Value.fromBoolean(value));
  }

  get issueState_description(): string {
    let value = this.get("issueState_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set issueState_description(value: string) {
    this.set("issueState_description", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
