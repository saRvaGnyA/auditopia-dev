// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EtherTransferred extends ethereum.Event {
  get params(): EtherTransferred__Params {
    return new EtherTransferred__Params(this);
  }
}

export class EtherTransferred__Params {
  _event: EtherTransferred;

  constructor(event: EtherTransferred) {
    this._event = event;
  }

  get auditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class betNoBugsPoolEvent extends ethereum.Event {
  get params(): betNoBugsPoolEvent__Params {
    return new betNoBugsPoolEvent__Params(this);
  }
}

export class betNoBugsPoolEvent__Params {
  _event: betNoBugsPoolEvent;

  constructor(event: betNoBugsPoolEvent) {
    this._event = event;
  }

  get auditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contributor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get contribution(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auditState(): betNoBugsPoolEventAuditStateStruct {
    return changetype<betNoBugsPoolEventAuditStateStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class betNoBugsPoolEventAuditStateStruct extends ethereum.Tuple {
  get auditId(): BigInt {
    return this[0].toBigInt();
  }

  get ownerId(): Address {
    return this[1].toAddress();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get contractCid(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get isComplete(): boolean {
    return this[5].toBoolean();
  }

  get yesBugs(): BigInt {
    return this[6].toBigInt();
  }

  get noBugs(): BigInt {
    return this[7].toBigInt();
  }

  get yesBugsPoolEth(): BigInt {
    return this[8].toBigInt();
  }

  get noBugsPoolEth(): BigInt {
    return this[9].toBigInt();
  }

  get bugExistsDecision(): boolean {
    return this[10].toBoolean();
  }
}

export class betYesBugsPoolEvent extends ethereum.Event {
  get params(): betYesBugsPoolEvent__Params {
    return new betYesBugsPoolEvent__Params(this);
  }
}

export class betYesBugsPoolEvent__Params {
  _event: betYesBugsPoolEvent;

  constructor(event: betYesBugsPoolEvent) {
    this._event = event;
  }

  get auditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contributor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get contribution(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auditState(): betYesBugsPoolEventAuditStateStruct {
    return changetype<betYesBugsPoolEventAuditStateStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class betYesBugsPoolEventAuditStateStruct extends ethereum.Tuple {
  get auditId(): BigInt {
    return this[0].toBigInt();
  }

  get ownerId(): Address {
    return this[1].toAddress();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get contractCid(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get isComplete(): boolean {
    return this[5].toBoolean();
  }

  get yesBugs(): BigInt {
    return this[6].toBigInt();
  }

  get noBugs(): BigInt {
    return this[7].toBigInt();
  }

  get yesBugsPoolEth(): BigInt {
    return this[8].toBigInt();
  }

  get noBugsPoolEth(): BigInt {
    return this[9].toBigInt();
  }

  get bugExistsDecision(): boolean {
    return this[10].toBoolean();
  }
}

export class insertIntoAuditEvent extends ethereum.Event {
  get params(): insertIntoAuditEvent__Params {
    return new insertIntoAuditEvent__Params(this);
  }
}

export class insertIntoAuditEvent__Params {
  _event: insertIntoAuditEvent;

  constructor(event: insertIntoAuditEvent) {
    this._event = event;
  }

  get auditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ownerId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get createdAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get contractCid(): string {
    return this._event.parameters[3].value.toString();
  }

  get description(): string {
    return this._event.parameters[4].value.toString();
  }

  get isComplete(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get yesBugs(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get noBugs(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get yesBugsPoolEth(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get noBugsPoolEth(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get bugExistsDecision(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class insertIntoIssueEvent extends ethereum.Event {
  get params(): insertIntoIssueEvent__Params {
    return new insertIntoIssueEvent__Params(this);
  }
}

export class insertIntoIssueEvent__Params {
  _event: insertIntoIssueEvent;

  constructor(event: insertIntoIssueEvent) {
    this._event = event;
  }

  get issueId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auditId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reportedBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get isAccepted(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get isPending(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get description(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class setAuditCompletedEvent extends ethereum.Event {
  get params(): setAuditCompletedEvent__Params {
    return new setAuditCompletedEvent__Params(this);
  }
}

export class setAuditCompletedEvent__Params {
  _event: setAuditCompletedEvent;

  constructor(event: setAuditCompletedEvent) {
    this._event = event;
  }

  get auditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bugExistsDecision(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get auditState(): setAuditCompletedEventAuditStateStruct {
    return changetype<setAuditCompletedEventAuditStateStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class setAuditCompletedEventAuditStateStruct extends ethereum.Tuple {
  get auditId(): BigInt {
    return this[0].toBigInt();
  }

  get ownerId(): Address {
    return this[1].toAddress();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get contractCid(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get isComplete(): boolean {
    return this[5].toBoolean();
  }

  get yesBugs(): BigInt {
    return this[6].toBigInt();
  }

  get noBugs(): BigInt {
    return this[7].toBigInt();
  }

  get yesBugsPoolEth(): BigInt {
    return this[8].toBigInt();
  }

  get noBugsPoolEth(): BigInt {
    return this[9].toBigInt();
  }

  get bugExistsDecision(): boolean {
    return this[10].toBoolean();
  }
}

export class setIsIssueAcceptedEvent extends ethereum.Event {
  get params(): setIsIssueAcceptedEvent__Params {
    return new setIsIssueAcceptedEvent__Params(this);
  }
}

export class setIsIssueAcceptedEvent__Params {
  _event: setIsIssueAcceptedEvent;

  constructor(event: setIsIssueAcceptedEvent) {
    this._event = event;
  }

  get issueId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isIssueAccepted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get issueState(): setIsIssueAcceptedEventIssueStateStruct {
    return changetype<setIsIssueAcceptedEventIssueStateStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class setIsIssueAcceptedEventIssueStateStruct extends ethereum.Tuple {
  get issueId(): BigInt {
    return this[0].toBigInt();
  }

  get auditId(): BigInt {
    return this[1].toBigInt();
  }

  get reportedBy(): Address {
    return this[2].toAddress();
  }

  get isAccepted(): boolean {
    return this[3].toBoolean();
  }

  get isPending(): boolean {
    return this[4].toBoolean();
  }

  get description(): string {
    return this[5].toString();
  }
}

export class Database__getAuditResultValue0Struct extends ethereum.Tuple {
  get auditId(): BigInt {
    return this[0].toBigInt();
  }

  get ownerId(): Address {
    return this[1].toAddress();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get contractCid(): string {
    return this[3].toString();
  }

  get description(): string {
    return this[4].toString();
  }

  get isComplete(): boolean {
    return this[5].toBoolean();
  }

  get yesBugs(): BigInt {
    return this[6].toBigInt();
  }

  get noBugs(): BigInt {
    return this[7].toBigInt();
  }

  get yesBugsPoolEth(): BigInt {
    return this[8].toBigInt();
  }

  get noBugsPoolEth(): BigInt {
    return this[9].toBigInt();
  }

  get bugExistsDecision(): boolean {
    return this[10].toBoolean();
  }
}

export class Database__getIssueResultValue0Struct extends ethereum.Tuple {
  get issueId(): BigInt {
    return this[0].toBigInt();
  }

  get auditId(): BigInt {
    return this[1].toBigInt();
  }

  get reportedBy(): Address {
    return this[2].toAddress();
  }

  get isAccepted(): boolean {
    return this[3].toBoolean();
  }

  get isPending(): boolean {
    return this[4].toBoolean();
  }

  get description(): string {
    return this[5].toString();
  }
}

export class Database__getListOfNoBugsVotersResultValue0Struct extends ethereum.Tuple {
  get contributor(): Address {
    return this[0].toAddress();
  }

  get etherContributed(): BigInt {
    return this[1].toBigInt();
  }
}

export class Database__getListOfYesBugsVotersResultValue0Struct extends ethereum.Tuple {
  get contributor(): Address {
    return this[0].toAddress();
  }

  get etherContributed(): BigInt {
    return this[1].toBigInt();
  }
}

export class Database extends ethereum.SmartContract {
  static bind(address: Address): Database {
    return new Database("Database", address);
  }

  setAuditCompleted(bugExistsDecision: boolean, auditId: BigInt): boolean {
    let result = super.call(
      "setAuditCompleted",
      "setAuditCompleted(bool,uint256):(bool)",
      [
        ethereum.Value.fromBoolean(bugExistsDecision),
        ethereum.Value.fromUnsignedBigInt(auditId)
      ]
    );

    return result[0].toBoolean();
  }

  try_setAuditCompleted(
    bugExistsDecision: boolean,
    auditId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setAuditCompleted",
      "setAuditCompleted(bool,uint256):(bool)",
      [
        ethereum.Value.fromBoolean(bugExistsDecision),
        ethereum.Value.fromUnsignedBigInt(auditId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setIssueAccepted(isIssueAccepted: boolean, issueId: BigInt): boolean {
    let result = super.call(
      "setIssueAccepted",
      "setIssueAccepted(bool,uint256):(bool)",
      [
        ethereum.Value.fromBoolean(isIssueAccepted),
        ethereum.Value.fromUnsignedBigInt(issueId)
      ]
    );

    return result[0].toBoolean();
  }

  try_setIssueAccepted(
    isIssueAccepted: boolean,
    issueId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setIssueAccepted",
      "setIssueAccepted(bool,uint256):(bool)",
      [
        ethereum.Value.fromBoolean(isIssueAccepted),
        ethereum.Value.fromUnsignedBigInt(issueId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAudit(auditId: BigInt): Database__getAuditResultValue0Struct {
    let result = super.call(
      "getAudit",
      "getAudit(uint256):((uint256,address,uint256,string,string,bool,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );

    return changetype<Database__getAuditResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAudit(
    auditId: BigInt
  ): ethereum.CallResult<Database__getAuditResultValue0Struct> {
    let result = super.tryCall(
      "getAudit",
      "getAudit(uint256):((uint256,address,uint256,string,string,bool,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Database__getAuditResultValue0Struct>(value[0].toTuple())
    );
  }

  getAuditsIdsForAddress(ownerAddress: Address): Array<BigInt> {
    let result = super.call(
      "getAuditsIdsForAddress",
      "getAuditsIdsForAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(ownerAddress)]
    );

    return result[0].toBigIntArray();
  }

  try_getAuditsIdsForAddress(
    ownerAddress: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAuditsIdsForAddress",
      "getAuditsIdsForAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(ownerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getContractEth(): BigInt {
    let result = super.call("getContractEth", "getContractEth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getContractEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractEth",
      "getContractEth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIssue(issueId: BigInt): Database__getIssueResultValue0Struct {
    let result = super.call(
      "getIssue",
      "getIssue(uint256):((uint256,uint256,address,bool,bool,string))",
      [ethereum.Value.fromUnsignedBigInt(issueId)]
    );

    return changetype<Database__getIssueResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getIssue(
    issueId: BigInt
  ): ethereum.CallResult<Database__getIssueResultValue0Struct> {
    let result = super.tryCall(
      "getIssue",
      "getIssue(uint256):((uint256,uint256,address,bool,bool,string))",
      [ethereum.Value.fromUnsignedBigInt(issueId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Database__getIssueResultValue0Struct>(value[0].toTuple())
    );
  }

  getIssueIdsForAddress(ownerAddress: Address): Array<BigInt> {
    let result = super.call(
      "getIssueIdsForAddress",
      "getIssueIdsForAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(ownerAddress)]
    );

    return result[0].toBigIntArray();
  }

  try_getIssueIdsForAddress(
    ownerAddress: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getIssueIdsForAddress",
      "getIssueIdsForAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(ownerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getIssueIdsForAudits(auditId: BigInt): Array<BigInt> {
    let result = super.call(
      "getIssueIdsForAudits",
      "getIssueIdsForAudits(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );

    return result[0].toBigIntArray();
  }

  try_getIssueIdsForAudits(
    auditId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getIssueIdsForAudits",
      "getIssueIdsForAudits(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getListOfNoBugsVoters(
    auditId: BigInt
  ): Array<Database__getListOfNoBugsVotersResultValue0Struct> {
    let result = super.call(
      "getListOfNoBugsVoters",
      "getListOfNoBugsVoters(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );

    return result[0].toTupleArray<
      Database__getListOfNoBugsVotersResultValue0Struct
    >();
  }

  try_getListOfNoBugsVoters(
    auditId: BigInt
  ): ethereum.CallResult<
    Array<Database__getListOfNoBugsVotersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getListOfNoBugsVoters",
      "getListOfNoBugsVoters(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Database__getListOfNoBugsVotersResultValue0Struct>()
    );
  }

  getListOfYesBugsVoters(
    auditId: BigInt
  ): Array<Database__getListOfYesBugsVotersResultValue0Struct> {
    let result = super.call(
      "getListOfYesBugsVoters",
      "getListOfYesBugsVoters(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );

    return result[0].toTupleArray<
      Database__getListOfYesBugsVotersResultValue0Struct
    >();
  }

  try_getListOfYesBugsVoters(
    auditId: BigInt
  ): ethereum.CallResult<
    Array<Database__getListOfYesBugsVotersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getListOfYesBugsVoters",
      "getListOfYesBugsVoters(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(auditId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Database__getListOfYesBugsVotersResultValue0Struct
      >()
    );
  }

  hasVoted(auditId: BigInt, voter: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(auditId),
      ethereum.Value.fromAddress(voter)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(auditId: BigInt, voter: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(auditId),
      ethereum.Value.fromAddress(voter)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BetNoBugsPoolCall extends ethereum.Call {
  get inputs(): BetNoBugsPoolCall__Inputs {
    return new BetNoBugsPoolCall__Inputs(this);
  }

  get outputs(): BetNoBugsPoolCall__Outputs {
    return new BetNoBugsPoolCall__Outputs(this);
  }
}

export class BetNoBugsPoolCall__Inputs {
  _call: BetNoBugsPoolCall;

  constructor(call: BetNoBugsPoolCall) {
    this._call = call;
  }

  get auditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BetNoBugsPoolCall__Outputs {
  _call: BetNoBugsPoolCall;

  constructor(call: BetNoBugsPoolCall) {
    this._call = call;
  }
}

export class BetYesBugsPoolCall extends ethereum.Call {
  get inputs(): BetYesBugsPoolCall__Inputs {
    return new BetYesBugsPoolCall__Inputs(this);
  }

  get outputs(): BetYesBugsPoolCall__Outputs {
    return new BetYesBugsPoolCall__Outputs(this);
  }
}

export class BetYesBugsPoolCall__Inputs {
  _call: BetYesBugsPoolCall;

  constructor(call: BetYesBugsPoolCall) {
    this._call = call;
  }

  get auditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BetYesBugsPoolCall__Outputs {
  _call: BetYesBugsPoolCall;

  constructor(call: BetYesBugsPoolCall) {
    this._call = call;
  }
}

export class DistributionCall extends ethereum.Call {
  get inputs(): DistributionCall__Inputs {
    return new DistributionCall__Inputs(this);
  }

  get outputs(): DistributionCall__Outputs {
    return new DistributionCall__Outputs(this);
  }
}

export class DistributionCall__Inputs {
  _call: DistributionCall;

  constructor(call: DistributionCall) {
    this._call = call;
  }

  get auditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DistributionCall__Outputs {
  _call: DistributionCall;

  constructor(call: DistributionCall) {
    this._call = call;
  }
}

export class InsertIntoAuditCall extends ethereum.Call {
  get inputs(): InsertIntoAuditCall__Inputs {
    return new InsertIntoAuditCall__Inputs(this);
  }

  get outputs(): InsertIntoAuditCall__Outputs {
    return new InsertIntoAuditCall__Outputs(this);
  }
}

export class InsertIntoAuditCall__Inputs {
  _call: InsertIntoAuditCall;

  constructor(call: InsertIntoAuditCall) {
    this._call = call;
  }

  get ownerId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractCid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class InsertIntoAuditCall__Outputs {
  _call: InsertIntoAuditCall;

  constructor(call: InsertIntoAuditCall) {
    this._call = call;
  }
}

export class InsertIntoIssueCall extends ethereum.Call {
  get inputs(): InsertIntoIssueCall__Inputs {
    return new InsertIntoIssueCall__Inputs(this);
  }

  get outputs(): InsertIntoIssueCall__Outputs {
    return new InsertIntoIssueCall__Outputs(this);
  }
}

export class InsertIntoIssueCall__Inputs {
  _call: InsertIntoIssueCall;

  constructor(call: InsertIntoIssueCall) {
    this._call = call;
  }

  get auditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reportedBy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class InsertIntoIssueCall__Outputs {
  _call: InsertIntoIssueCall;

  constructor(call: InsertIntoIssueCall) {
    this._call = call;
  }
}

export class SetAuditCompletedCall extends ethereum.Call {
  get inputs(): SetAuditCompletedCall__Inputs {
    return new SetAuditCompletedCall__Inputs(this);
  }

  get outputs(): SetAuditCompletedCall__Outputs {
    return new SetAuditCompletedCall__Outputs(this);
  }
}

export class SetAuditCompletedCall__Inputs {
  _call: SetAuditCompletedCall;

  constructor(call: SetAuditCompletedCall) {
    this._call = call;
  }

  get bugExistsDecision(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get auditId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAuditCompletedCall__Outputs {
  _call: SetAuditCompletedCall;

  constructor(call: SetAuditCompletedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetIssueAcceptedCall extends ethereum.Call {
  get inputs(): SetIssueAcceptedCall__Inputs {
    return new SetIssueAcceptedCall__Inputs(this);
  }

  get outputs(): SetIssueAcceptedCall__Outputs {
    return new SetIssueAcceptedCall__Outputs(this);
  }
}

export class SetIssueAcceptedCall__Inputs {
  _call: SetIssueAcceptedCall;

  constructor(call: SetIssueAcceptedCall) {
    this._call = call;
  }

  get isIssueAccepted(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get issueId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetIssueAcceptedCall__Outputs {
  _call: SetIssueAcceptedCall;

  constructor(call: SetIssueAcceptedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
